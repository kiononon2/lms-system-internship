// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "lms-system-internship/entities"

	mock "github.com/stretchr/testify/mock"
)

// LessonRepository is an autogenerated mock type for the LessonRepository type
type LessonRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *LessonRepository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *LessonRepository) FindAll(ctx context.Context) ([]*entities.Lesson, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*entities.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.Lesson, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.Lesson); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByChapterID provides a mock function with given fields: ctx, chapterID
func (_m *LessonRepository) FindByChapterID(ctx context.Context, chapterID uint) ([]*entities.Lesson, error) {
	ret := _m.Called(ctx, chapterID)

	if len(ret) == 0 {
		panic("no return value specified for FindByChapterID")
	}

	var r0 []*entities.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]*entities.Lesson, error)); ok {
		return rf(ctx, chapterID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []*entities.Lesson); ok {
		r0 = rf(ctx, chapterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, chapterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *LessonRepository) FindByID(ctx context.Context, id uint) (*entities.Lesson, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entities.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entities.Lesson, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entities.Lesson); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, lesson
func (_m *LessonRepository) Save(ctx context.Context, lesson *entities.Lesson) error {
	ret := _m.Called(ctx, lesson)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Lesson) error); ok {
		r0 = rf(ctx, lesson)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, lesson
func (_m *LessonRepository) Update(ctx context.Context, lesson *entities.Lesson) error {
	ret := _m.Called(ctx, lesson)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Lesson) error); ok {
		r0 = rf(ctx, lesson)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLessonRepository creates a new instance of LessonRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLessonRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LessonRepository {
	mock := &LessonRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
