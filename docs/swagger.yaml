basePath: /api
definitions:
  entities.Attachment:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      lessonID:
        type: integer
      name:
        type: string
      url:
        type: string
    type: object
  entities.Chapter:
    properties:
      course_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      lessons:
        items:
          $ref: '#/definitions/entities.Lesson'
        type: array
      name:
        type: string
      order:
        type: integer
      updated_at:
        type: string
    type: object
  entities.Course:
    properties:
      chapters:
        items:
          $ref: '#/definitions/entities.Chapter'
        type: array
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  entities.Lesson:
    properties:
      chapter_id:
        type: integer
      content:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      order:
        type: integer
      updated_at:
        type: string
    type: object
  handler.GrantLessonAccessRequest:
    properties:
      lesson_id:
        type: integer
      user_id:
        type: string
    type: object
  handler.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  handler.RefreshRequest:
    properties:
      refresh_token:
        type: string
    type: object
  handler.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  handler.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  handler.UpdateLessonContentRequest:
    properties:
      content:
        type: string
    type: object
  handler.UpdateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
    type: object
  handler.UpdateUserRolesRequest:
    properties:
      new_roles:
        description: Роли, которые нужно оставить
        items:
          type: string
        type: array
      user_id:
        type: string
    required:
    - new_roles
    - user_id
    type: object
  pkg.ErrorResponse:
    properties:
      error:
        description: JSON ключ — "error", как у тебя и было
        type: string
    type: object
host: localhost:3030
info:
  contact: {}
  description: Это API для системы управления курсами
  title: LMS API
  version: "1.0"
paths:
  /api/admin/register:
    post:
      consumes:
      - application/json
      description: Creates a new user in Keycloak with optional roles
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /api/admin/update-roles:
    post:
      consumes:
      - application/json
      description: Replaces a user's roles in Keycloak with the given list
      parameters:
      - description: User role update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateUserRolesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user roles (admin only)
      tags:
      - admin
  /api/chapters:
    get:
      description: Retrieves a list of all chapters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Chapter'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Get all chapters
      tags:
      - chapters
    post:
      consumes:
      - application/json
      description: Adds a new chapter to a specific course
      parameters:
      - description: Course ID
        in: query
        name: course_id
        required: true
        type: integer
      - description: Chapter data
        in: body
        name: chapter
        required: true
        schema:
          $ref: '#/definitions/entities.Chapter'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Chapter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Create a new chapter
      tags:
      - chapters
  /api/chapters/{chapter_id}:
    delete:
      description: Deletes a specific chapter by its ID
      parameters:
      - description: Chapter ID
        in: path
        name: chapter_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Delete a chapter
      tags:
      - chapters
    get:
      description: Retrieves a specific chapter by its ID
      parameters:
      - description: Chapter ID
        in: path
        name: chapter_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Chapter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Get chapter by ID
      tags:
      - chapters
  /api/chapters/{chapter_id}/lessons/reorder:
    put:
      consumes:
      - application/json
      description: Reorders the lessons in a chapter based on given list of IDs
      parameters:
      - description: Chapter ID
        in: path
        name: chapter_id
        required: true
        type: integer
      - description: New lesson order
        in: body
        name: ids
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Reorder lessons
      tags:
      - lessons
  /api/chapters/{chapter_id}/order:
    put:
      consumes:
      - application/json
      description: Updates the order field of a specific chapter
      parameters:
      - description: Chapter ID
        in: path
        name: chapter_id
        required: true
        type: integer
      - description: New order value, e.g. {\
        in: body
        name: order
        required: true
        schema:
          additionalProperties:
            type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Update chapter order
      tags:
      - chapters
  /api/courses:
    get:
      description: Retrieves a list of all courses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Course'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Get all courses
      tags:
      - courses
    post:
      consumes:
      - application/json
      description: Adds a new course to the system
      parameters:
      - description: Course data
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/entities.Course'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Create a new course
      tags:
      - courses
  /api/courses/{course_id}:
    delete:
      description: Deletes a course by its ID
      parameters:
      - description: Course ID
        in: path
        name: course_id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Delete a course
      tags:
      - courses
    get:
      description: Retrieves details of a course by its ID
      parameters:
      - description: Course ID
        in: path
        name: course_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Get a course by ID
      tags:
      - courses
    put:
      consumes:
      - application/json
      description: Updates course details by ID
      parameters:
      - description: Course ID
        in: path
        name: course_id
        required: true
        type: integer
      - description: Updated course
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/entities.Course'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Update a course
      tags:
      - courses
  /api/lessons:
    get:
      description: Retrieves a list of all lessons
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Lesson'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Get all lessons
      tags:
      - lessons
    post:
      consumes:
      - application/json
      description: Adds a new lesson to a specific chapter
      parameters:
      - description: Chapter ID
        in: query
        name: chapter_id
        required: true
        type: integer
      - description: Lesson data
        in: body
        name: lesson
        required: true
        schema:
          $ref: '#/definitions/entities.Lesson'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Lesson'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Create a new lesson
      tags:
      - lessons
  /api/lessons/{lesson_id}:
    delete:
      description: Deletes a specific lesson by its ID
      parameters:
      - description: Lesson ID
        in: path
        name: lesson_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Delete a lesson
      tags:
      - lessons
    get:
      description: Retrieves a specific lesson by its ID
      parameters:
      - description: Lesson ID
        in: path
        name: lesson_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Lesson'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Get lesson by ID
      tags:
      - lessons
    put:
      consumes:
      - application/json
      description: Updates the content field of a specific lesson
      parameters:
      - description: Lesson ID
        in: path
        name: lesson_id
        required: true
        type: integer
      - description: New content
        in: body
        name: content
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateLessonContentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.ErrorResponse'
      summary: Update lesson content
      tags:
      - lessons
  /api/lessons/grant-access:
    post:
      consumes:
      - application/json
      description: Предоставляет пользователю доступ к конкретному уроку
      parameters:
      - description: Данные доступа
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.GrantLessonAccessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Назначить доступ к уроку
      tags:
      - lessons
  /api/user/profile:
    put:
      consumes:
      - application/json
      description: Allows the authenticated user to update their email, name, and
        password
      parameters:
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update current user's profile
      tags:
      - user
  /attachments/download/{attachment_id}:
    get:
      description: Отправляет файл, если у пользователя есть доступ к уроку
      parameters:
      - description: ID вложения
        in: path
        name: attachment_id
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Скачивание файла по ID вложения
      tags:
      - attachments
  /attachments/upload:
    post:
      consumes:
      - multipart/form-data
      description: Загружает файл и прикрепляет его к уроку по lesson_id
      parameters:
      - description: ID урока
        in: formData
        name: lesson_id
        required: true
        type: integer
      - description: Файл для загрузки
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Attachment'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Загрузка файла к уроку
      tags:
      - attachments
  /auth/login:
    post:
      consumes:
      - application/json
      description: Получить JWT токены по имени пользователя и паролю
      parameters:
      - description: Данные для входа
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TokenResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Аутентификация пользователя
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Получить новые access и refresh токены по refresh_token
      parameters:
      - description: Refresh токен
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TokenResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновление токена
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
